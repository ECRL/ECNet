#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# tools/smiles_to_qspr.py
#
# Obtains QSPR descriptors for SMILES strings
# TODO: Add wrapper for Dragon software
#

from os.path import abspath, dirname, isfile, join
from os import remove
from shutil import which
from argparse import ArgumentParser
from sys import argv
from subprocess import check_output
from csv import reader, DictWriter
import pybel

# Default path is ..\PaDEL-Descriptor\PaDEL-Descriptor.jar
_PADEL_PATH = join(
    dirname(abspath(__file__)),
    'PaDEL-Descriptor',
    'PaDEL-Descriptor.jar'
)

# Check installations
if which('obabel') is None:

    raise ReferenceError('Open Babel installation not found')

if which('java') is None:

    raise ReferenceError('Java installation not found')


def get_descriptors(smiles_file, padel_path=_PADEL_PATH,
                    model_file='mols.mdl', descriptors_file='descriptors.csv',
                    clean_up=True):
    '''Obtains descriptors for SMILES strings

    Args:
        smiles_file (str): path to .smiles file, one string per line
        padel_path (str): path to PaDEL-Descriptor
        model_file (str): path to .mdl file generated by this function
        descriptors_file (str): path to raw .csv file generated by this
            function
        clean_up (bool): if True, removes model_file and descriptors_file when
            this function is complete

    Returns:
        list: each element is a dictionary for each molecule, containing its
            SMILES string and all descriptors generated
    '''

    if not isfile(padel_path):

        raise FileNotFoundError('PaDEL-Descriptor.jar not found at {}'.format(
            padel_path
        ))

    print('Invoking Open Babel to generate MDL file...')
    check_output(
        [
            'obabel',
            '-i',
            'smi',
            smiles_file,
            '-o',
            'mdl',
            '-O',
            model_file,
            '--gen3D'
        ]
    )
    print('Invoking PaDEL-Descriptor to generate QSPR descriptors...')
    check_output(
        [
            'java',
            '-jar',
            padel_path,
            '-2d',
            '-3d',
            '-retainorder',
            '-retain3d',
            '-dir',
            'mols.mdl',
            '-file',
            descriptors_file
        ]
    )
    print('Descriptors Generated')
    with open(smiles_file, 'r') as smi_file:
        smiles_strings = smi_file.read().split('\n')
    molecules = []
    with open(descriptors_file, 'r', encoding='utf-8') as csv_file:
        rows = list(reader(csv_file))
        fieldnames = rows[0][1:]
        for sidx, row in enumerate(rows[1:]):
            mol_dict = {'SMILES': smiles_strings[sidx]}
            for idx, cell in enumerate(row[1:]):
                mol_dict[fieldnames[idx]] = cell
            molecules.append(mol_dict)
    if clean_up == 'True':
        remove(model_file)
        remove(descriptors_file)
    return molecules


def save_file(molecules, output_file):
    '''Save generated descriptors to specified file

    Args:
        molecules (list): list of dicts, generated by get_descriptors
        output_file (str): path to save file
    '''

    with open(output_file, 'w', encoding='utf-8') as csv_file:
        fieldnames = sorted(list(molecules[0].keys()))
        fieldnames.remove('SMILES')
        csv_headers = ['SMILES']
        csv_headers.extend(fieldnames)
        writer = DictWriter(
            csv_file,
            delimiter=',',
            lineterminator='\n',
            fieldnames=csv_headers
        )
        writer.writeheader()
        for mol in molecules:
            writer.writerow(mol)


def parse_args():
    '''Run from command line

    Returns:
        dict: {
            'smiles_file',
            'output_file',
            'padel_path',
            'model_file'
        }
    '''

    ap = ArgumentParser()
    ap.add_argument(
        'smiles_file',
        type=str,
        help='Path to .smiles file'
    )
    ap.add_argument(
        '--output_file',
        type=str,
        help='Path to output file',
        default=None
    )
    ap.add_argument(
        '--padel_path',
        type=str,
        help='Path to PaDEL-Descriptor.jar'
        ' (defaults to ..\PaDEL-Descriptor\PaDEL-Descriptor.jar)',
        default=_PADEL_PATH
    )
    ap.add_argument(
        '--model_file',
        type=str,
        help='Path to temporary .mdl file',
        default='./mols.mdl'
    )
    ap.add_argument(
        '--descriptors_file',
        type=str,
        help='Path to temporary descriptor .csv file',
        default='./descriptors.csv'
    )
    ap.add_argument(
        '--clean_up',
        type=str,
        help='If True, cleans up temporary files',
        default='True',
        choices=['True', 'False']
    )
    return vars(ap.parse_args(argv[1:]))


def main(args):
    '''Run from command line'''

    molecules = get_descriptors(args['smiles_file'], clean_up=args['clean_up'])
    if args['output_file'] is None:
        args['output_file'] = args['smiles_file'].replace('.smiles', '.csv')
    save_file(molecules, args['output_file'])


if __name__ == '__main__':
    '''Run from command line'''

    main(parse_args())
